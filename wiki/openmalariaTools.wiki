A GUI frontend for managing, creating and running local experiments.

= Introduction =

openmalariaTools is a GUI created for an easier interaction with the openmalaria scientific application. Instead of putting different commands in a terminal the user just chooses his options in the GUI.

OpenmalariaTools is developed as a cross-platform application using [http://www.python.org Python] and [http://pygtk.org PyGTK]. For some of its features, openmalariaTools requires a Java run-time environment.

= Downloads =

OpenmalariaTools is currently in beta stage 6. It runs on both Linux and Windows, but currently not on the Mac OS due to the unavailability of PyGTK natively on the Mac.

The beta 6 release uses schema version 28 and has been packaged with an installer for windows and debian packages for linux. To use:

  * Make sure a [http://www.java.com/en/download/ Java run-time environment] is installed.
  * Install [http://www.python.org/download/ Python] (version 2.6 or 2.7; the 3.x series won't work) and [http://www.pygtk.org/downloads.html PyGTK]. (The older installer should do this for you, but the latest archive won't.)
  * Download and install one of the following:
      * (Windows installer) [http://openmalaria.googlecode.com/svn/download/openmalariaTools/openmalariaTools-V00.06/win32/openMalariaTools_installer_v00.06.exe openMalariaTools_installer_v00.06.exe]
      * (linux 64-bit .deb) [http://openmalaria.googlecode.com/svn/download/openmalariaTools/openmalariaTools-V00.06/gnu64/openmalariaTools_00.06_i386.deb openmalariaTools_00.06_i386.deb]
      * (linux 32-bit .deb) [http://openmalaria.googlecode.com/svn/download/openmalariaTools/openmalariaTools-V00.06/gnu32/openmalariaTools_00.06_i386.deb openmalariaTools_00.06_i386.deb]

Note that the latest (Windows) version does not have an installer. Just extract the archive somewhere, and run the `start_gui.py` file. (This archive will also work on other platforms, if a suitable `application/openMalaria` binary is added.)

Alternatively, one can install from source (familiarity with [http://subversion.apache.org/ subversion] or [http://tortoisesvn.tigris.org/ TortoiseSVN] assumed).

  * Make sure a Java run-time environment, python and PyGTK are installed (as above).
  * Check out the sources:
    {{{
svn checkout http://openmalaria.googlecode.com/svn/application_deployment OpenmalariaTools
}}}
  * Potentially replace the `application/openMalaria[.exe]` binary.

= Features =

openmalariaTools features:

  * Experiment creator
  * Basic scenario editor 
  * Batch mode 
  * Live graph integration
  * Automatic schema translation
  * Custom population size setting (for test batches)

= Usage =

Run some scenarios:

  # Open the application
  # Click on the load button
  # Select some scenario files. If the files' schema version is older than the system supported one, then the tool will ask if you want that it updates the scenario files for you (It could happen that an automatic translation isn't possible. In this case you will need to update the scenario yourself).
  # Add some options or select a specific output folder.
    * Use Livegraph (is enabled only if one scenario is selected). This option allows you to start a third party software called livegraph which is real-time plotting the data outputted from openmalaria scientific application (This needs some specific parameters in the scenario file's monitoring section).
    * Single Output folder. Instead of having an output folder per scenario file, you will have only one output folder for all the selected scenarios. This is useful if you're running a large amount of scenarios (batch).
    * Custom population size. You can set a custom population size for all the selected scenarios. This is useful if you want to test your scenarios (a small population size is less demanding in term of computing power and time).
    * Please be aware that for security reasons, you could not be able on windows seven or vista to write output data in the default output folder. You should then select another path (eg. your home folder).
  # Finally click on the start button under the "terminal" screen and wait. You can either follow your scenarios' progression on the "terminal" or have a situation summary in scenarios' list where you can see the outcomes (success, failure or not yet started).

= Screenshots =

||*overview*||
||<a href="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/run.jpg"><img src="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/run.jpg" width="600"/></a>||
||*livegraph*||
||<a href="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/livegraph.jpg"><img src="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/livegraph.jpg" width="600"/></a>||
||*editor*||
||<a href="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/editor.jpg"><img src="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/editor.jpg" width="600"/></a>||
||*experiment creator*||
||<a href="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/experiment_creator.jpg"><img src="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/experiment_creator.jpg" width="600"/></a>||