A GUI frontend for managing, creating and running local experiments.

= Introduction =

openmalariaTools is a GUI created for an easier interaction with the openmalaria scientific application. Instead of putting different commands in a terminal the user just chooses his options in the GUI.

OpenmalariaTools is developed as a cross-platform application using [http://www.python.org Python] and [http://pygtk.org PyGTK]. For some of its features, openmalariaTools requires a Java run-time environment.

= Downloads =

OpenmalariaTools is currently in beta stage 6. It runs on both Linux and Windows, but currently not on the Mac OS due to the unavailability of PyGTK natively on the Mac.

The beta 6 release uses schema version 28 and has been packaged with an installer for windows and debian packages for linux. To use:

  * Make sure a [http://www.java.com/en/download/ Java run-time environment] is installed.
  * Install [http://www.python.org/download/ Python] (version 2.6 or 2.7; the 3.x series won't work) and [http://www.pygtk.org/downloads.html PyGTK]. (The older installer should do this for you, but the latest archive won't.)
  * Download and install one of the following:
      * (Windows installer) [http://openmalaria.googlecode.com/svn/download/openmalariaTools/openmalariaTools-V00.08/win32/openMalariaTools_installer_v00.08.exe OpenMalariaTools_installer_v00.08.exe]
      * (linux 32-bit .deb) [http://openmalaria.googlecode.com/svn/download/openmalariaTools/openmalariaTools-V00.08/gnu32/openmalariaTools_00.08_i386.deb openmalariaTools_00.08_i386.deb]

Note that the latest (Windows) version does not have an installer. Just extract the archive somewhere, and run the `start_gui.py` file. (This archive will also work on other platforms, if a suitable `application/openMalaria` binary is added.)

Alternatively, one can install from source (familiarity with [http://subversion.apache.org/ subversion] or [http://tortoisesvn.tigris.org/ TortoiseSVN] assumed).

  * Make sure a Java run-time environment, python and PyGTK are installed (as above).
  * Check out the sources:
    {{{
svn checkout http://openmalaria.googlecode.com/svn/application_deployment OpenmalariaTools
}}}
  * Potentially replace the `application/openMalaria[.exe]` binary.

= Features =

openmalariaTools features:

  * Experiment creator
  * Basic scenario editor 
  * Batch mode 
  * Live graph integration
  * Automatic schema translation
  * Custom population size setting (for test batches)

= Usage =

Run some scenarios:

  # Open the application
  # Click on the load button
  # Select some scenario files. If the files' schema version is older than the system supported one, then the tool will whether it should attempt to automatically update the scenario files. It could happen that an automatic translation isn't possible, in which case you will  need to update the scenario manually.
  # Add  options to a model run or select a specific output folder.
    * Use [http://www.live-graph.org/ LiveGraph]. The LiveGraph option  will only be enabled once a scenario is selected. It allows you to start a third party software called LiveGraph to plot the data produced from the *openmalaria* simulator. Be aware that LiveGraph will look for requires specific parameters in the scenario file's monitoring section.
    * Single output folder. Instead of having one output folder per scenario file, you may opt to have one output folder for all the selected scenarios. This is useful if you're running many scenarios (_e.g._, in batch mode).
    * Custom population size. The population size can be customized for all selected scenarios. This feature is particularly useful if you want to test a scenario with a smaller population size before committing computer resources for a longer simulation.
    * If you are running *openmalaria* on a Windows 7 or Vista platform, the operating systems' security settings may prevent you from writing data to the default output folder.   You should then select another path (_e.g._, your home folder).
  # When you have completed the simulations set up, click on the start button under the *terminal* screen and wait. You may follow your scenarios' progression on the *terminal* or review the situation summary in scenarios' list where you can see the status of each simulation (success, failure, or not yet started).

= Screenshots =

||*overview*||
||<a href="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/run.jpg"><img src="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/run.jpg" width="600"/></a>||
||*livegraph*||
||<a href="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/livegraph.jpg"><img src="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/livegraph.jpg" width="600"/></a>||
||*editor*||
||<a href="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/editor.jpg"><img src="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/editor.jpg" width="600"/></a>||
||*experiment creator*||
||<a href="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/experiment_creator.jpg"><img src="http://openmalaria.googlecode.com/svn/application_deployment/screenshots/beta_3/experiment_creator.jpg" width="600"/></a>||