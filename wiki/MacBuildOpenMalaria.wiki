#summary Brief build instructions for the mac.

= Dependencies =

This is similar to [UnixBuildOpenMalaria unix].

Additionally, you should install [http://python.org/download/ python 2.6] (just download and run the mac installer). Python 3.0 doesn't work at the moment.

= Building =

After checking out the sources, you have two options to build openmalaria (at least, two that have been tested):
 * Use Xcode (see below)
 * Use Makefiles (see the [UnixBuildOpenMalaria unix] page)

= Building static binaries =

To be able to build a static binary, you need to link the openMalaria executable to the carbon Framework. 
For still unknown reasons it is impossible to build a working static binary with the cmake generated xcode project (although the carbon framework is added to the project and a linking step is specified for each target).

It's possible to build a working static build using Makefiles (see the [UnixBuildOpenMalaria unix] page) but you will have to do a rather messy operation. During the make's linking phase the compiler will complain about undefined constants, because he doesn't link the binary with the carbon framework.

You should expect to see some errors like:

Undefined symbols:
`"_`CFStringCreateMutableWithExternalCharactersNoCopy`"`, referenced from: xercesc_3_1::MacOSUnicodeConverter::upperCase(unsigned short`*`)in libxerces-c.a(MacOSUnicodeConverter.o)
xercesc_3_1::MacOSUnicodeConverter::lowerCase(unsigned short`*`)in libxerces-c.a(MacOSUnicodeConverter.o)

In the terminal, under the _ Linking CXX executable openMalaria _ message you will see something like that:

`/usr/bin/c++    -Wl,-search_paths_first -headerpad_max_install_names -fPIC CMakeFiles/openMalaria.dir/model/openMalaria.cpp.o  -o openMalaria  -L/Users/africa/workspace/openmalaria_r885/trunk/build/xsdcxx model/libmodel.a ...`

you should Copy this and add * -framework Carbon *, paste it, and finally execute it. 

You should have now a working static build. 

== Xcode ==

 * Run cmake-gui
  * set the source dir, and the build dir (suggested: SOURCE_DIR/build; if this doesn't exist cmake will ask if you want to create it)
  * Run configure. Set the build system to Xcode.
  * You either need to disable OM_CXXTEST_ENABLE or install [http://code.google.com/p/yaml-cpp/ yaml-cpp] for now (this may change)
  * Configure, and generate
 * From the build dir, open openmalaria.xcodeproj
  * First you need to build the xsdcxx target (select libxsdcxx.a as the active target; build).
  * Then you can build the rest with the ALL_BUILD target.
  * You can run the tests by building the RUN_TESTS target (currently doesn't appear to work).
 * If cmake regenerates the project for some reason, you need to reload it in Xcode. Sometimes it will ask you, *but sometimes it won't* (and you need to manually reload the project in xcode).