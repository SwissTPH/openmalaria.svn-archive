#summary How to set up and build openmalaria on windows

= Set up =

Create a working directory. Checkout openmalaria into a sub-folder (see the [http://code.google.com/p/openmalaria/source/checkout Source] tab). Perhaps use TortoiseSvn for this...

= Dependencies =

Openmalaria requires the following; for many just run the installer:
 * A build system:
  * Visual Studio (only VS 2005 (version 8.0) tested; older compilers I expect won't work)
  * Code::Blocks, along with some compiler (recommended:  [http://www.codeblocks.org/downloads/5#windows install the version with mingw]) (not actually tested, but should work)
  * GNU make along with some compiler (probably not so easy to set up)
 * gsl - get from [ftp://sunsite.cnlab-switch.ch/mirror/gnu/gsl here] (oldest supported is 1.11); extract to your working directory above the openmalaria code and rename to "gsl". Hopefully something like this works.
  * You then need to compile the libraries or get them from somewhere... TODO
 * XSD - run the .msi installer from [http://codesynthesis.com/products/xsd/download.xhtml here]. If you already have an old version, delete scenario.cxx, scenario.hxx and scenario.ixx.
 * Xerces-C - versions 2.8 or 3.0 should work; 3.0 is included with the XSD installer for windows. Here we assume you have installed Xerces along with XSD (the default option when installing XSD. Find the xerces-all.sln file in you Xerces install directory (the default location will be something like C:\Program Files\CodeSynthesis XSD 3.2\xerces-c-3.0.1\projects\Win32\VC8\xerces-all for the VS version 8 solution file), and open it with VS. Choose the "Release" build configuration. Build the XercesLib build target. This will create a file C:\Program Files\CodeSynthesis XSD 3.2\xerces-c-3.0.1\Build\Win32\VC8\Static Release\xerces-c_3.lib (Optional: Build using the "Static Release" target to creat a xerces-c_static_3.lib library, then follow the instructions below to create openMalaria with Xerces statically linked).
 * zlib - get the DLL download from [www.zlib.net here], extract to the working directory above the openmalaria sources and rename to "zlib".
 * CMake 2.4 or 2.6 - use the installer from [http://www.cmake.org/cmake/resources/software.html here].
 * Python - download from [http://www.python.org here].
 * [http://www.boost.org/doc/libs/1_41_0/more/getting_started/windows.html Boost].
  * Either use the installer as suggested on that page, or download the archive and extract it to `C:\Program Files\boost` (so the config.hpp file will be at `C:\Program FIles\boost\boost_VER\boost\config.hpp`).
  * I don't know which is the oldest compatible version; I know 1.41.0 works. Newer versions will need to have their version number added in openmalaria/CMakeLists.txt (search for Boost_ADDITIONAL_VERSIONS).

NB: The unit tests have a dependency on yaml-cpp (for reading in data for the vector tests). If you disable OM_CXXTEST_ENABLE (a CMake option), you won't need to install yaml-cpp.

= Build =

Create a new folder to build in (normally openmalaria/build but it doesn't have to be). Start the cmake-gui, set the source and build directories, and click configure. Tell CMake what kind of build system to generate (probably Visual Studio or Code::Blocks). Probably sort a few things, click configure again and then generate.

If you plan to run the tests, the cmake options "OM_BOXTEST_..." and "OM_CXXTEST_..." control which tests are included.


== Compiling with Code::Blocks or Visual Studio ==

Navigate to your build directory and open "OpenMalaria.cbp" or "OpenMalaria.sln". Build like normal.

Note: if you get told that the project has been modified externally, you must reload it. Any time you click build and any of the CMakeLists.txt files have changed, cmake will regenerate the project file (so any custom settings will be lost). If you want to change any cmake settings, run cmake-gui; if you just want to rebuild the project file, you could do this or you could build the "rebuild_cache" build-target (in Code::Blocks anyway).

You can select the Debug/Release/... build mode, but it seems you have to rebuild when changing this (in Visual Studio).

If on Visual Studio 2005 (and maybe others), when inside VS5, open the Properties of the project openMalaria, Check Configuration Properties/Linker/Input. If Ignore Specific Library has LIBCMT, replace with MSVCRT. If you don't do this change, openmalaria will compile but not run.


= Compiling without a .net dependency and with Xerces statically linked =
(Ignore this section unless you *know* you want to do this. It's mostly notes to make a BOINC release version with minimal dependencies.)

TODO: Add XERCES_STATIC_LIBRARY to openMalaria compile targets.

In the cmake configuration for OpenMalaria:
 * set OM_USE_LIBCMT to true
 * edit {{{CMAKE_CXX_FLAGS_*}}} (whichever build mode you're interested in): change "/MD" to "/MT" (or "/MDd" to "/MTd")

= Running Simulations =

If you want to run the tests, 
 * Visual Studio: build the "RUN_TESTS" target
 * Code::Blocks: change the build-target to "test" and click build. Unfortunately you can't cancel the test, and need to change the build-target back to "all" (or whichever you want) afterwards.
 * From a command-line (should work whichever build-tool you use): navigate to the build directory, and run "ctest". You can also just run some tests like this, e.g. "ctest -I 5,6".
 
If you want to run individual simulations using your own scenario.xml file then use the command line from build directory or create a .bat file in the build directory.


= Troubleshooting =

== '_read_ : is not a member of 'std::basic_istream<_Elem,_Traits>' ==

Update BOINC (this is caused by a wierd macro in BOINC).