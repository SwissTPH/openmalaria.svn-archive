#summary Compiling on Linux.
#labels Phase-Implementation,linux,installation


= Preparation =

This page documents the effort to compile and run the simulator on a typical Ubuntu Linux box. It is an effort to help other people doing the same and a way to find problems in the building/process.

 # Checkout from Subversion: (see [http://code.google.com/p/openmalaria/source/checkout here])
 # Optionally, install BOINC into the openmalaria trunk folder:
  {{{
  cd path-above-openmalaria-trunk
  apt-get install pkg-config libcurl4-openssl-dev
  svn co http://boinc.berkeley.edu/svn/branches/server_stable boinc
  cd boinc
  ./configure --disable-server
  make -j 2
  cd ..
  }}}
  * The current BOINC version in ubuntu doesnt support graphics, as such a more moder version is needed (compilation and installation)
  * Be sure to at least have removed boinc-dev (and probably boinc-client). No other boinc should be running, or you will be inviting trouble.
  * You will need to move the installed directory to the simulator trunk. You can also set BOINCDIR (which is probably prefarable, anyway) 
 # Install GSL, code synthesis' xsd and xerces-c:
  {{{
  apt-get install libgsl0-dev xsdcxx libxerces-c2-dev
  }}}
 # For the separate graphics app, install freeglut3-dev
 # For --enable-deploy, create some libraries in trunk/lib:
  * libgsl.a, libgslcblas.a (from a GSL build folder:)
    {{{
   cp .libs/libgsl.a cblas/.libs/libgslcblas.a ../openmalaria/lib
   }}}
  * libxerces-c.a (from a xerces-c build folder:)
   {{{
   cd obj/LINUX
   ar cru libxerces-c.a `find . -name "*.o"` 
   mv libxerces-c.a ../../../malariaModel/lib/
   }}}
  * (from a BOINC build folder:)
   {{{
   cp api/libboinc_api.a lib/libboinc.a ../openmalaria/lib
   }}}

= The actual building =

Compile. The most useful configure options are:
 * --prefix path
  * E.g. {{{--prefix /usr/local}}} to install in /usr/local
 * --enable-deploy
  * Enables BOINC integration (required for running BOINC workunits)
  * Statically links the executables

{{{
./configure [options]
make -j 2 test
}}}

Potentially run `./autogen.sh` before configure if any of the Makefile.am files have been updated. You will likely need some extra packages:
{{{
apt-get install automake gawk libtool
}}}

= Problem solving =

== autoconf & automake ==

Be sure to have the latest versions of autoconf and automake. Some distributions might maintain many versions simultaneously, get rid of the older versions. For some reason (which doesn't seem to be faulted on the simulator) libtool cannot be installed.

== Removing all local changes ==

If the installation gets too much garbage and you cannot compile for some reason, you might do this on the trunk:

*svn status|grep ?|cut -f7 -d\ |xargs rm -rf*

Careful!!! You will delete everything not added to subversion. This will delete boinc, which was put on the trunk 