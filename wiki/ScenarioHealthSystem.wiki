#summary Configuration of health-system models used by scenarios

= Health Systems =

We have two different health system models implemented in OpenMalaria, one for a 1-day timestep and one for a 5-day timestep. These models include both health-system decisions such as treatment and outcomes including the probability of a death (thus they may also be referred to as clinical models). ([ModelClinical Read descriptions.])

== Data common to both models ==

Both models require input of the probability of a case fatality and of sequelae developing for severe malaria in inpatients. (Data for outpatients is simply estimated from these figures.) A template health-system element, including our standard data:

{{{
<healthSystem>
  ...
  <CFR>
    <group lowerbound="0" value="0.09189"/>
    <group lowerbound="0.25" value="0.0810811"/>
    <group lowerbound="0.75" value="0.0648649"/>
    <group lowerbound="1.5" value="0.0689189"/>
    <group lowerbound="2.5" value="0.0675676"/>
    <group lowerbound="3.5" value="0.0297297"/>
    <group lowerbound="4.5" value="0.0459459"/>
    <group lowerbound="7.5" value="0.0945946"/>
    <group lowerbound="12.5" value="0.1243243"/>
    <group lowerbound="15" value="0.1378378"/>
  </CFR>
  <pSequelaeInpatient interpolation="none">
    <group lowerbound="0.0" value="0.0132"/>
    <group lowerbound="5.0" value="0.005"/>
  </pSequelaeInpatient>
</healthSystem>
}}}
(This is for schema version 24. For compatibility with older versions, remove the `interpolation="none"` attribute.)

Graphs of this data, showing non-interpolated data in green and a linear interpolation in blue:

<wiki:comment>
Graphs generated with the `trunk/unittest/AgeGroupInterpolationSuite.py` script.
</wiki:comment>
http://openmalaria.googlecode.com/svn/wiki/images/CFR_age.png
http://openmalaria.googlecode.com/svn/wiki/images/prob_sequelae_age.png

TODO <placeholder>

=== 5-day timestep: `ImmediateOutcomes` ===

When the simulation uses a granularity of 5-day timesteps, fevers can be considered too occur entirely within one timestep, and thus it is reasonable to decide parasitological, clinical and cost outcomes within a single timestep — hence this model was named the clinical immediate outcome model.

First, the drugs used for `firstLine`, `secondLine` and `inpatient` treatment are defined in the `drugRegimen` element. Drug codes may be one of `CQ`, `SP`, `AQ`, `SPAQ`, `ACT`, `QN`, or `selfTreatment`.

Then, `compliance` (adherence rate), `initialACR` (initial cure-rate for compliers) and `nonCompliersEffective` (effective cure-rate for non-compliers) are specified per drug (must be described for self-treatment but optional for other drugs; values default to 0).

Additionally, the following (fairly self-explanetory) elements must be described: `pSeekOfficialCareUncomplicated1`, `pSelfTreatUncomplicated`, `pSeekOfficialCareUncomplicated2`, `pSeekOfficialCareSevere`, and `pSequelaeInpatient`.

=== 1-day timestep: `EventScheduler` ==

The event-scheduler model encapsulates a case-management model and schedules sickness events (fever start/end, recovery/death outcomes).

==== Case management: `uncomplicated` and `complicated` ====

The case-management part consists of decision trees and treatment schedules, split into two cases: `uncomplicated` for non-malarial and malarial fevers not requiring hospitalisation, and `complicated` for severe malarial fevers or those worsened through a further insult. Apart from a few decision rules, the `uncomplicated` and `complicated` elements have the same format: a `decisions` element and a `treatments` element.

===== `decisions` =====

The `decisions` element describes a model of treatment-seeking and health-system decisions, using a list of `decision` sub-elements.

A decision is described by:
 * a name (an identifier of alpha-numeric characters plus `.` and `_`)
 * a list of possible outcomes (decision outcomes are often referred to using the format `NAME(OUTCOME)`)
 * a list of other decisions this decision depends upon in order to be determined
 * some description of how an outcome is derived

A few built-in decisions exist, and a few particular decisions must be provided, but otherwise the number of decisions used and potential names are not fixed. The built-in and required decisions are:

|| name || outcomes || || description ||
|| `case` || `UC1`, `UC2` || built-in, `uncomplicated` only || Case is second-line (`UC2`) if, within the [XmlScenario#clinical health-system memory], a fever occurred where anti-malarials were prescribed, otherwise the case is `UC1`. ||
|| `result` || `none`, `negative`, `positive` || built-in || If the `test` decision has an outcome other than `none`, a parasite-density test is performed using the current density of the simulated case; otherwise the outcome is `none`. The number of RDT tests used is reported for costing purposes. ||
|| `test` || `none`, `microscopy`, `RDT` || required || Determines whether and which type of malarial diagnostic is used ||
|| `treatment` || || required || Selects which treatment to medicate. Outcomes are not restricted, but must match exactly the treatments available (so probably a treatment called "none" will need to be added). ||
|| `hospitalisation` || `none`,`immediate`,`delayed` || required for `complicated` || Determines whether the individual goes to hospital or not, and whether a 1-day delay to hospital entry occurs. Hospitalisation affects fatality rate, reporting, and protects patient from mosquito bites. A delay causes the afore-mentioned effects to be delayed as expected, but does not delay treatments — this means that immediate suppositories may be given, but hospital-administered drugs should be delayed by a day. || 

Regarding costing, sometimes in severe cases 2 tests would be used (by a referring health centre, and by the hospital accepting the patient). One method of dealing with this, assuming the in-hospital test result has no impact on treatment decisions, is to assume all patients get an RDT test in hospital (by adding the number of hospital recoveries+deaths+sequelae to the number of RDTs reported), and use the `test` decision to describe whether an out-of-hospital test occurs.

Decisions described in the XML are all given as a `decision` element who's content is some form of tree; there are currently two varieties as in the table below. The syntax for a tree is:

{{{
// a symbol is one or more characters in the set: a-z A-Z 0-9 . _
symbol = ( alnum | '.' | '_' )+
// double_ means a floating-point number; a range looks like: x-y
range = double_ '-' double_

// types of values: a symbol, a number, or a numeric range
value_symbol = symbol
value_double = double_
value_range = range

// an outcome either looks like { <tree> } (where <tree> is another whole tree)
// or like :<symbol> (where <symbol> is some symbol)
outcome = ( '{' tree '}' ) | ( ':' symbol )

// a branch looks like: X(Y)
// if X is "p" we have a probability branch; if it's "age" we have an age-range;
// otherwise X should be the name of a decision and Y one of the decision's outcomes
branch_p = "p" '(' value_double ')' outcome
branch_age = "age" '(' value_range ')' outcome
branch_decision = symbol '(' value_symbol ')' outcome

// A branch set is a list of one of more branches (all of the
// same type and, if decision branches, for the same decision).
// In whichever relevant way the set must be complete: probabilities
// add up to 1 or all outcomes of some decision be represented.
branch_set = ( branch_p | branch_age | branch_decision ) +

// A tree is either a branch set, or simply an outcome.
// This is the "entry point" -- describing the whole decision --
// but can also occur as a sub-tree.
tree = branch_set | symbol
}}}

Besides the special "age" and "p" cases (see table below), this allows us to determine an outcome based on another decision (this decision must, then, be listed under `depends`). Note that a decision used as a branch point (or "p" or "age") may be used again in a sub-tree (in particular, using multiple random trees may simplify writing decisions).

|| age-dependent || The tree must have exactly one dependency: `age`. Branches should be identified with the syntax `age(a-b)` where a and b are in the range `[0,inf]` (allowing the special value `inf`). In a branch-set these ranges must not overlap and must cover the entire range `[0,inf]` (i.e. lowest bound must be `0` and highest `inf` with matching boundaries). Age ranges are considered half-open, open at the top (i.e. an age on a boundary matches the higher age-group). ||
|| stochastic || A generic decision whose outcomes are determined by input decisions and/or random samples. Unless purely deterministic, `p` must be used as in input dependency and then probability branches may be specified using `p(x)` where `x` is the probability of the branch being chosen. All probabilities in a branch-set must add up to 1. ||

===== `treatments` =====

The `treatments` element consists of a list of `treatment` elements. Each `treatment` element has a `name` attribute (which must correspond to one of the outcomes of the `treatments` decision), a `schedule` element and a list of zero-or-more `modifier` elements.

The `schedule` element describes the base schedule of medications taken: a list of `medicate` elements describing each drug dose given (by `drug` code, dose in `mg`, and `hour` after start of case-management at which taken).

Since one base schedule may be well or poorly adhered to in several variations, we have `modifier` elements. Each modifier corresponds to one `decision` and has one of three types (see table below). Each of these consists of a list of sub-elements, each of which have attributes `value` (the decision's outcome), `effect` (effect of the modifier per drug-code prescribed; of the form `DRUG1(x),DRUG2(y)` where x and y are effects as described below), and optionally the boolean attribute `affectsCost` (whether costs are modified in the same way as the doses administered; defaults to one if not present; can be used to simulate low-quality drugs at standard cost and vomited doses).

|| sub-element name || description ||
|| `multiplyQty` || multiplies dose size; useful for age-specific dosing and poor-quality drugs ||
|| `delay` || delays each dose by the given number of hours; can be used for delayed arrival to a health facility but this won't affect the start/end time of the bout of illness ||
|| `selectTimeRange` || Causes doses outside the time range given to be missed (also not costed unless `affectsCost` is set false). The range `x-y` is interpreted as a half-open interval; for dose at time `t` to be taken we must have `x <= t < y`. ||

==== Severe-fever outcomes: `ClinicalOutcomes` ====

The `EventScheduler` element also has a `ClinicalOutcomes` element, describing:

|| name || type || description ||
|| maxUCSeekingMemory || int || Maximum number of timesteps (including first of case) an individual will remember they are sick before resetting. ||
|| uncomplicatedCaseDuration || int || Fixed length of an uncomplicated case of malarial/non-malarial sickness (from treatment seeking until return to life-as-usual). Usually 3. ||
|| complicatedCaseDuration || int || Fixed length of a complicated/severe case of malaria (from treatment seeking until return to life-as-usual). ||
|| complicatedRiskDuration || int || Number of days for which humans are at risk of death during a severe or complicated case of malaria. Cannot be greater than the duration of a complicated case or less than 1 day. ||
|| pImmediateUC || double || Probability that UC treatment seeking will be done immediately when sick, on second day given that it wasn't done on first, etc. ||


=== Case-fatality per age: `CFR` ===

The data here describes the case-fatality rates of hospitalised cases receiving successful treatment per age-group (or rather, a CFR-per-age function is constructed using step-wise linear interpolation of the (lowerbound, cfr) pairs).

Since collecting fatality-rate data for cases outside of hospital, the "community death rate" (used for cases not receiving hospital care, or, in the `ImmediateOutcomes` model, ineffective treatment) is constructed from the hospital CFR data by multiplying the odds by a parameter (exp of the LOG_ODDS_RATIO_CF_COMMUNITY parameter).

In practice, we always use the same data-set here.