#summary brief instructions for building openmalaria

= Building OpenMalaria =

This page gives a brief idea of how to compile OpenMalaria on a unix or linux machine.

As a matter of housekeeping, normally we create a central location for all dependencies and code for the project, in honor of our code-crunching colleagues at BOINC, we'll call this directory malariacontrol 
{{{
cd ~
mkdir malariacontrol
cd malariacontrol
}}}
You could at this time also create a malariacontrol/lib dir and install there libraries upon which opemmalaria depends. But our recommendation is to install dependencies globally into your system (for example, using make install).

== Dependencies ==

Openmalaria has the usual, and a few not-so-usual dependences. Most of these packages are distributed with your linux distribution and only need to be installed:

* python 2.6
* c and c++ libraries (these are contained within the ubuntu package *buildessential*)
 * gsl − If not included in your linux distribution, Install the [http://packages.debian.org/search?keywords=libgsl0-dev libgsl0-dev] package. For older linux distributions, please check that you are using gsl version >= 13, otherwise some black box tests might fail.
* libboost1.42
* [UnixBuildXercesC] [http://packages.debian.org/search?keywords=libxerces-c2-dev libxerces-c2-dev]
 * xsdcxx − Install the [http://packages.debian.org/search?keywords=xsdcxx xsdcxx] package or manually install from: http://codesynthesis.com/products/xsd/download.xhtml

*[Zliblg-dev] [http://packages.debian.org/search?keywords=Zliblg-dev Zliblg-dev]

If you want to contribute otherwise dormant cpu to the project via BOINC, also add

 * [UnixBuildBoinc] [http://packages.debian.org/search?keywords=boinc-dev boinc-dev] (optional; unless you want to deploy a boinc version you don't need this)

The openmalaria source code is stored in a source-safed repository that is managed with [subversion] [http://subversion.apache.org/packages.html subversion]. Thus you'll also need to have subversion installed when you check out the source code. The source safed repository can be access via the command line or GUI or IDE tools.

== Download the openmalaria source code and compile it==

The openmalaria source code is stored in a source-safed repository that is managed with [subversion] [http://subversion.apache.org/packages.html subversion]. Thus you'll also need to have subversion installed when you check out the source code.

First, [http://code.google.com/p/openmalaria/source/checkout check out the repository] and {{{cd}}} to that directory.

Again, it's much neater to build code from a separate directory, so all the generated files are kept out of the way:
{{{
mkdir build
cd build
}}}

The build directory will be empty - the next task is to *configure* the Makefiles that will be used to compile and link the source code and libraries. This task is best approached using the command line, or gui versions of the Cmake program.

Run cmake, passing the path of the openMalaria directory you checked out:
{{{
cmake-gui ..
# You can use ccmake or just cmake instead of cmake-gui
}}}
Note that, cmake-gui and ccmake are interactive; you first *configure*, then select or adjust options, rerun the configuration step , and finally *generate* the executable binary. Options you may want to change (e.g. to create a version to deploy as a boinc binary):
|| option || ||
|| CMAKE_BUILD_TYPE || You probably should change this;  RelWithDebInfo works well ||
|| BOINC_INTEGRATION || Enables BOINC. Defaults to off. ||
|| STATICALLY_LINK || Try linking everything statically instead of dynamically. Don't use unless you know you want it. ||
|| CMAKE_VERBOSE_MAKEFILE || If you're having trouble building and want to tweak the linker command, you'll need more detail in the makefile ||

Now you should be ready to build. Depending on which build-tool you selected (cmake will ask when configuring on an empty build directory), you can run `make`, or you can open the project/solution file generated by cmake in the build dir.

=== Static build ===

Be aware that checking the *STATICALLY_LINK option doesn't ensure you that the gsl and xerces static libs will be used*. The system will automatically take the dynamic libraries although this option is checked. You should then ensure that the system will use the static libraries by  giving the paths (in most cases /usr/local/lib or /usr/lib) to the static libraries.

To avoid problems using static Xerces libraries (mutex errors) you'll need to compile xerces from on your own system. You will need to give the linker the *-static-libgcc* argument.

The configure command would be similar to these two examples:

Building Xerces-c 2.8:
./runConfigure -plinux -cgcc -xg++ -minmem -nsocket -tnative -rpthread -s -l-static-libgcc

Building Xerces-c 3.1.1:	
./configure --disable-shared --disable-network LDFLAGS=-static-libgcc

After this step you should be able to build a proper static openMalaria build. You still have to make sure that
the openMalaria building process will use the static libstdc++. To ensure that, please pass the arguments *-static-libgcc -Wl,-Bstatic -lstdc++* to the linker. 

After having compiled the binaries, you can check that the correct dependencies have been installed  with *ldd*.  

== Running the included tests ==

Several unit tests have been built for openmalaria and these should be run after every build, to confirm that nothing has gone amiss in the build process.
From the build directory, run ctest (can pass the `-j 2` option to speed up):
{{{
$ ctest
Start processing tests
Test project /home/gouigoui/workspace/OpenMalaria_readOnly/build
  1/ 13 Testing 1                                Passed
  2/ 13 Testing 2                                Passed
  3/ 13 Testing 3                                Passed
  4/ 13 Testing 4                                Passed
  5/ 13 Testing 5                                Passed
  6/ 13 Testing 6                                Passed
  7/ 13 Testing 9                                Passed
  8/ 13 Testing 11                               Passed
  9/ 13 Testing 12                               Passed
 10/ 13 Testing IPT                              Passed
 11/ 13 Testing VecTest                          Passed
 12/ 13 Testing VecFullTest                      Passed
 13/ 13 Testing unittest                         Passed
100% tests passed, 0 tests failed out of 13
}}}

Alternately, you can use the test/run.py script directly:
{{{
# (from build folder)
test/run.py 1 2 3
test/run.py VecTest -- --checkpoint
test/run.py Empirical --gdb
test/run.py --help
}}}