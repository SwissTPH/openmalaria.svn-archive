#summary brief instructions for building openmalaria

= Building OpenMalaria =

This page gives a brief idea of how to compile OpenMalaria. We have (older) longer instructions, but I think most of the time they're not actually required. One alternate set of instructions is [LinuxCompiling here], another is unfortunately on a server which is not publically accessible.

Normally we create a parent directory and put all dependencies and code there:
{{{
cd ~
mkdir malariacontrol
cd malariacontrol
}}}
You can also create a malariacontrol/lib dir and put dependency libraries there. But I recommend you install them (make install) in which case you won't need to do this.

== Dependencies ==

 * [UnixBuildBoinc] [http://packages.debian.org/search?keywords=boinc-dev boinc-dev] (optional; unless you want to deploy a boinc version you don't need this)
 * [UnixBuildXercesC] [http://packages.debian.org/search?keywords=libxerces-c2-dev libxerces-c2-dev]
 * xsd − Install the [http://packages.debian.org/search?keywords=xsdcxx xsdcxx] package or manually install from: http://codesynthesis.com/products/xsd/download.xhtml
 * gsl − Install the [http://packages.debian.org/search?keywords=libgsl0-dev libgsl0-dev] package or manually install... For older linux distributions, please check that you are using gsl version >= 13, otherwise you will have some failing black box tests.

== Compiling ==

First, [http://code.google.com/p/openmalaria/source/checkout check out the repository] and {{{cd}}} to that directory.

It's much neater to build code from a separate directory, so all the generated files are kept out of the way:
{{{
mkdir build
cd build
}}}

Now run cmake, passing the path of the openMalaria directory you checked out:
{{{
cmake-gui ..
# You can use ccmake or just cmake instead of cmake-gui
}}}
cmake-gui and ccmake are interactive; you first *configure*, then optionally change some options, then *configure* again and finally *generate*. Options you may want to change (e.g. to create a version to deploy to as a boinc binary):
|| option || ||
|| CMAKE_BUILD_TYPE || You probably should change this; I'd suggest using RelWithDebInfo. ||
|| BOINC_INTEGRATION || Enables BOINC. Defaults to off. ||
|| STATICALLY_LINK || Try linking everything statically instead of dynamically. Don't use unless you know you want it. ||
|| CMAKE_VERBOSE_MAKEFILE || If you're having trouble building and want to tweak the linker command... ||

Now you should be ready to build. Depending on which build-tool you selected (cmake will ask when configuring on an empty build directory), you can run `make`, or you can open the project/solution file generated by cmake in the build dir.

=== Static build ===

Checking the *STATICALLY_LINK option doesn't ensure you that the gsl and xerces static libs will be used*. The system will automatically take the dynamic libraries although this option is checked. You should then ensure that the system will use the static libraries by  giving the paths (in most cases /usr/local/lib or /usr/lib) to the static libraries.

To avoid problems using static Xerces libraries (mutex errors) you should use xerces sources and compile them on your own system. You will have to give the linker the *-static-libgcc* argument.

The configure command would be pretty much identical to those two examples:

Building Xerces-c 2.8:
./runConfigure -plinux -cgcc -xg++ -minmem -nsocket -tnative -rpthread -s -l-static-libgcc

Building Xerces-c 3.1.1:	
./configure --disable-shared --disable-network LDFLAGS=-static-libgcc

After this step you should be able to build a proper static openMalaria build. You still have to make sure that
the openMalaria building process will use the static libstdc++. To ensure that, please pass the arguments *-static-libgcc -Wl,-Bstatic -lstdc++* to the linker. 

After having compiled the binaries, you can check the dependencies with ldd.  

== Running the included tests ==

From the build directory, run ctest (can pass the `-j 2` option to speed up):
{{{
$ ctest
Start processing tests
Test project /home/gouigoui/workspace/OpenMalaria_readOnly/build
  1/ 13 Testing 1                                Passed
  2/ 13 Testing 2                                Passed
  3/ 13 Testing 3                                Passed
  4/ 13 Testing 4                                Passed
  5/ 13 Testing 5                                Passed
  6/ 13 Testing 6                                Passed
  7/ 13 Testing 9                                Passed
  8/ 13 Testing 11                               Passed
  9/ 13 Testing 12                               Passed
 10/ 13 Testing IPT                              Passed
 11/ 13 Testing VecTest                          Passed
 12/ 13 Testing VecFullTest                      Passed
 13/ 13 Testing unittest                         Passed
100% tests passed, 0 tests failed out of 13
}}}

Alternately, you can use the test/run.py script directly:
{{{
# (from build folder)
test/run.py 1 2 3
test/run.py VecTest -- --checkpoint
test/run.py Empirical --gdb
test/run.py --help
}}}